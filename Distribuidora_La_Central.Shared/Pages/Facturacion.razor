@page "/facturacion"
@inject HttpClient Http
@using Distribuidora_La_Central.Shared.Models

@using System.Net.Http
@using System.Net.Http.Json

<h3>Gestión de Facturas</h3>

<div class="mb-3">
    <button class="btn @GetTabClass("facturacion") me-2" @onclick="@(() => CambiarTab("facturacion"))">Facturación</button>
    <button class="btn @GetTabClass("historial")" @onclick="@(() => CambiarTab("historial"))">Historial de Facturas</button>
</div>

@if (activeTab == "facturacion")
{
    <div class="factura-formulario">
        <EditForm Model="@factura" OnValidSubmit="@GuardarFactura">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label>Cliente:</label>
                    <select @bind="factura.codigoCliente" class="form-control">
                        <option value="">-- Seleccione un cliente --</option>
                        @if (clientes != null)
                        {
                            @foreach (var c in clientes)
                            {
                                <option value="@c.codigoCliente">@c.nombre @c.apellido</option>
                            }
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label>Fecha:</label>
                    <input type="date" @bind="factura.fecha" class="form-control" />
                </div>

                <div class="col-md-6 mb-3">
                    <label>Total Factura:</label>
                    <input type="text" @bind="factura.totalFactura" class="form-control" readonly />
                </div>

                <div class="col-md-6 mb-3">
                    <label>Saldo:</label>
                    <input type="text" @bind="factura.saldo" class="form-control" readonly />
                </div>

                <div class="col-md-6 mb-3">
                    <label>Tipo:</label>
                    <select @bind="factura.tipo" class="form-control">
                        <option value="">-- Seleccione --</option>
                        <option value="Contado">Contado</option>
                        <option value="Crédito">Crédito</option>
                    </select>
                </div>
            </div>

            <hr />
            <h5>Agregar Producto</h5>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label>Descripción del Producto:</label>
                    <select class="form-control" @onchange="ProductoSeleccionado">
                        <option value="">-- Seleccione un producto --</option>
                        @if (productos != null && productos.Any())
                        {
                            @foreach (var prod in productos)
                            {
                                <option value="@prod.codigoProducto">@prod.descripcion</option>
                            }
                        }
                    </select>
                </div>

                <div class="col-md-2 mb-3">
                    <label>Código:</label>
                    <input type="text" class="form-control" value="@productoSeleccionado?.codigoProducto" readonly />
                </div>

                <div class="col-md-2 mb-3">
                    <label>Precio Unitario:</label>
                    <input type="text" class="form-control" value="@productoSeleccionado?.costo.ToString("F2")" readonly />
                </div>

                <div class="col-md-2 mb-3">
                    <label>Cantidad:</label>
                    <input type="number" class="form-control" @bind="detalleFactura.cantidad" min="1" />
                </div>

                <div class="col-md-2 mb-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="AgregarProducto">Agregar</button>
                </div>
            </div>

            <!-- Tabla de productos agregados -->
            @if (detallesFactura.Any())
            {
                <div class="mt-3">
                    <h5>Productos a Facturar</h5>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Descripción</th>
                                <th>Precio Unitario</th>
                                <th>Cantidad</th>
                                <th>Subtotal</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in detallesFactura)
                            {
                                <tr>
                                    <td>@detalle.codigoProducto</td>
                                    <td>@(productos.FirstOrDefault(p => p.codigoProducto == detalle.codigoProducto)?.descripcion)</td>
                                    <td>@detalle.precioUnitario.ToString("F2")</td>
                                    <td>@detalle.cantidad</td>
                                    <td>@((detalle.cantidad * detalle.precioUnitario).ToString("F2"))</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger"
                                                @onclick="@(() => EliminarProducto(detalle.codigoProducto))">
                                            Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="4" class="text-end"><strong>Total:</strong></td>
                                <td><strong>@detallesFactura.Sum(d => d.cantidad * d.precioUnitario).ToString("F2")</strong></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }

            <button type="submit" class="btn btn-primary mt-2">@(editando ? "Actualizar" : "Registrar")</button>
            @if (editando)
            {
                <button type="button" class="btn btn-secondary mt-2 ms-2" @onclick="CancelarEdicion">Cancelar</button>
            }

            <button type="button" class="btn btn-success mt-3" @onclick="MostrarModalAbono">Abono</button>
        </EditForm>

        @if (mostrarModalAbono)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Registrar Abono</h5>
                            <button type="button" class="btn-close" @onclick="CerrarModalAbono"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="abono" OnValidSubmit="GuardarAbono">
                                <div class="form-group">
                                    <label>Factura</label>
                                    <!-- Selector de factura -->
                                    <select class="form-control" @bind="selectedCodigoFactura">
                                        <option disabled value="0">Seleccione una factura</option>
                                        @if (facturas != null)
                                        {
                                            foreach (var factura in facturas)
                                            {
                                                <option value="@factura.codigoFactura">@factura.codigoFactura</option>
                                            }
                                        }
                                    </select>



                                    <!-- Campos de solo lectura -->
                                    <div class="form-group">
                                        <label>Total de Factura</label>
                                        <input class="form-control" value="@totalFactura" readonly />
                                    </div>

                                    <div class="form-group">
                                        <label>Saldo Actual</label>
                                        <input class="form-control" value="@saldoActual" readonly />
                                    </div>

                                </div>
                                <div class="form-group">
                                    <label>Abono</label>
                                    <InputNumber @bind-Value="abono.montoAbono" class="form-control" @oninput="ActualizarEstadoFactura" />
                                </div>

                                <div class="form-group">
                                    <label>Estado</label>
                                    <input class="form-control" value="@estadoFactura" readonly />
                                </div>

                                <button class="btn btn-primary" type="submit">Guardar Abono</button>
                            </EditForm>

                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (activeTab == "historial")
{
    <div class="factura-lista">
        <h4>Lista de Facturas</h4>
        @if (facturas == null)
        {
            <p><em>Cargando...</em></p>
        }
        else if (facturas.Count == 0)
        {
            <p>No hay facturas registradas.</p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Cliente</th>
                        <th>Fecha</th>
                        <th>Total</th>
                        <th>Saldo</th>
                        <th>Tipo</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var f in facturas)
                    {
                        <tr>
                            <td>@f.codigoFactura</td>
                            <td>@(clientes.FirstOrDefault(c => c.codigoCliente == f.codigoCliente)?.nombre) @(clientes.FirstOrDefault(c => c.codigoCliente == f.codigoCliente)?.apellido)</td>
                            <td>@f.fecha.ToShortDateString()</td>
                            <td>@f.totalFactura.ToString("F2")</td>
                            <td>@f.saldo.ToString("F2")</td>
                            <td>@f.tipo</td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => EditarFactura(f)">Editar</button>
                                <button class="btn btn-sm btn-danger ms-1" @onclick="() => EliminarFactura(f.codigoFactura)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private List<Producto> productos = new();
    private Producto productoSeleccionado = new();
    private DetalleFactura detalleFactura = new();
    private List<DetalleFactura> detallesFactura = new();

    private bool mostrarModalAbono = false;
    private Abono abono = new();

    private List<Cliente> clientes = new();
    private List<Factura> facturas;
    private Factura factura = new();
    private bool editando = false;
    private string activeTab = "facturacion";

    private bool mostrarModalExito = false;
    private string mensajeExito = "";

    private decimal totalFactura = 0;
    private decimal saldoFactura = 0;
    private decimal saldoActual = 0;
    private int facturaSeleccionada = 0;
    private string estadoFactura = "Pendiente";
    private decimal montoFacturaSeleccionada;
    private decimal saldoFacturaSeleccionada;

    private void CerrarModalExito()
    {
        mostrarModalExito = false;
    }

    [Inject] private IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        await CargarClientes();
        await CargarFacturas();
    }

    private async Task CargarProductos()
    {
        productos = await Http.GetFromJsonAsync<List<Producto>>("api/Producto/GetAllProductos")
                    ?? new List<Producto>();
    }

    private async Task CargarClientes()
    {
        clientes = await Http.GetFromJsonAsync<List<Cliente>>("api/Cliente/GetAllClientes")
                   ?? new List<Cliente>();
    }

    // private async Task CargarFacturas()
    // {
    //     facturas = await Http.GetFromJsonAsync<List<Factura>>("api/Factura/GetAllFacturas")
    //                ?? new List<Factura>();
    // }

    private void ProductoSeleccionado(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int codigoSeleccionado))
        {
            productoSeleccionado = productos.FirstOrDefault(p => p.codigoProducto == codigoSeleccionado) ?? new Producto();
            detalleFactura.codigoProducto = productoSeleccionado.codigoProducto;
            detalleFactura.precioUnitario = productoSeleccionado.costo;
        }
    }

    private void AgregarProducto()
    {
        if (productoSeleccionado == null || productoSeleccionado.codigoProducto == 0 || detalleFactura.cantidad <= 0)
            return;

        var detalleExistente = detallesFactura.FirstOrDefault(d => d.codigoProducto == productoSeleccionado.codigoProducto);

        if (detalleExistente != null)
        {
            detalleExistente.cantidad += detalleFactura.cantidad;
            detalleExistente.subtotal = detalleExistente.cantidad * detalleExistente.precioUnitario;
        }
        else
        {
            detallesFactura.Add(new DetalleFactura
                {
                    codigoProducto = productoSeleccionado.codigoProducto,
                    cantidad = detalleFactura.cantidad,
                    precioUnitario = productoSeleccionado.costo,
                    subtotal = detalleFactura.cantidad * productoSeleccionado.costo
                });
        }

        // Actualizar totales
        factura.totalFactura = detallesFactura.Sum(d => d.subtotal);
        factura.saldo = factura.totalFactura;

        // Resetear para nuevo producto
        productoSeleccionado = new Producto();
        detalleFactura = new DetalleFactura();
    }

    private void EliminarProducto(int codigoProducto)
    {
        var detalle = detallesFactura.FirstOrDefault(d => d.codigoProducto == codigoProducto);
        if (detalle != null)
        {
            detallesFactura.Remove(detalle);
            factura.totalFactura = detallesFactura.Sum(d => d.subtotal);
            factura.saldo = factura.totalFactura;
        }
    }

    private async Task GuardarFactura()
    {
        try
        {
            var facturaConDetalles = new FacturaConDetalles
                {
                    Factura = factura,
                    Detalles = detallesFactura
                };

            HttpResponseMessage response;

            if (editando)
            {
                response = await Http.PutAsJsonAsync($"api/Factura/ActualizarFactura/{factura.codigoFactura}", facturaConDetalles);

                if (response.IsSuccessStatusCode)
                {
                    await CargarFacturas();
                    LimpiarFormulario();
                    CambiarTab("historial");
                    mensajeExito = "Factura actualizada exitosamente";
                    mostrarModalExito = true;
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Factura/AgregarFactura", facturaConDetalles);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<FacturaResponse>();
                    factura.codigoFactura = result.codigoFactura;

                    await CargarFacturas();
                    LimpiarFormulario();
                    CambiarTab("historial");
                    mensajeExito = result.message ?? "Factura registrada exitosamente";
                    mostrarModalExito = true;
                }
            }

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al guardar: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Ocurrió un error: {ex.Message}");
        }
    }

    private void LimpiarFormulario()
    {
        factura = new Factura();
        detallesFactura = new List<DetalleFactura>();
        productoSeleccionado = new Producto();
        detalleFactura = new DetalleFactura();
        editando = false;
    }

    private void MostrarModalAbono()
    {
        abono = new Abono { fechaAbono = DateTime.Today };
        mostrarModalAbono = true;
    }

    private void CerrarModalAbono() => mostrarModalAbono = false;
    //
    private string errorMessage;
    private async Task GuardarAbono()
    {
        if (abono.codigoFactura == 0)
        {
            errorMessage = "Debe seleccionar una factura válida.";
            return;
        }
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5282/api/abono/registrar-abono", abono);

            if (response.IsSuccessStatusCode)
            {
                saldoFactura -= abono.montoAbono;
                estadoFactura = saldoFactura <= 0 ? "Pagado" : "Pendiente";
                abono = new Abono();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = $"Error al guardar abono: {response.StatusCode}";
                var content = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(content))
                    errorMessage += $", Detalle: {content}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Excepción: {ex.Message}";
        }
    }
    private int selectedCodigoFactura
    {
        get => abono.codigoFactura;
        set
        {
            if (abono.codigoFactura != value)
            {
                abono.codigoFactura = value;
                _ = OnFacturaSeleccionada(value);
            }
        }
    }

    private async Task OnFacturaSeleccionada(int codigoFactura)
    {
        try
        {
            var factura = await Http.GetFromJsonAsync<Factura>($"http://localhost:5282/api/factura/GetFacturaPorCodigo/{codigoFactura}");

            if (factura != null)
            {
                totalFactura = factura.totalFactura;
                saldoActual = factura.saldo;
                estadoFactura = saldoActual <= 0 ? "Pagado" : "Pendiente";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al obtener factura: " + ex.Message);
        }
    }



    private void ActualizarEstadoFactura(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal abonoActual))
        {
            abono.montoAbono = abonoActual;
            var nuevoSaldo = saldoFactura - abono.montoAbono;
            estadoFactura = nuevoSaldo <= 0 ? "Pagado" : "Pendiente";
        }
    }


    private async Task CargarFacturas()
    {
        facturas = await Http.GetFromJsonAsync<List<Factura>>("http://localhost:5282/api/factura/GetAllFacturas");

    }



    private void EditarFactura(Factura f)
    {
        factura = new Factura
            {
                codigoFactura = f.codigoFactura,
                codigoCliente = f.codigoCliente,
                fecha = f.fecha,
                totalFactura = f.totalFactura,
                saldo = f.saldo,
                tipo = f.tipo
            };
        editando = true;
    }

    private void CancelarEdicion()
    {
        LimpiarFormulario();
    }

    private async Task EliminarFactura(int codigo)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar la factura #{codigo}?");
        if (confirm)
        {
            await Http.DeleteAsync($"api/Factura/eliminar-factura/{codigo}");
            await CargarFacturas();
        }
    }

    private void CambiarTab(string tab) => activeTab = tab;
    private string GetTabClass(string tab) => tab == activeTab ? "btn-primary" : "btn-outline-primary";

    public class FacturaConDetalles
    {
        public Factura Factura { get; set; }
        public List<DetalleFactura> Detalles { get; set; }
    }

    public class FacturaResponse
    {
        public int codigoFactura { get; set; }
        public string message { get; set; }
    }
}


<style>
    h3 {
        color: #1A2E5A;
        margin-bottom: 20px;
        font-weight: 600;
        border-bottom: 2px solid #E30613;
        padding-bottom: 8px;
        display: inline-block;
    }
    /* Estilos personalizados para Gestión de Facturas */
    .factura-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 20px;
        background-color: #f5f7fa;
        min-height: 100vh;
    }

    .factura-formulario {
        background-color: #ffffff;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
    }



        .factura-formulario label {
            font-weight: 500;
            margin-top: 15px;
            color: #1A2E5A;
        }

        .factura-formulario .form-control {
            margin-top: 5px;
            margin-bottom: 15px;
            padding: 8px;
            border-radius: 6px;
            border: 1px solid #ccc;
            font-size: 14px;
        }

        .factura-formulario button {
            margin-top: 10px;
            font-weight: 500;
            padding: 10px 20px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .factura-formulario .btn-primary {
            background-color: #1A2E5A;
            color: #fff;
        }

            .factura-formulario .btn-primary:hover {
                background-color: #153063;
            }

        .factura-formulario .btn-secondary {
            background-color: #E30613;
            color: #fff;
        }

            .factura-formulario .btn-secondary:hover {
                background-color: #b4040d;
            }

    /* Estilos para la tabla de facturas */
    .factura-lista h4 {
        color: #1A2E5A;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #ffffff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .table thead {
            background-color: #1A2E5A;
            color: white;
        }

        .table th, .table td {
            padding: 12px 15px;
            text-align: left;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
        }

    .table-striped tbody tr:nth-child(odd) {
        background-color: #f2f2f2;
    }

    .table button {
        padding: 6px 12px;
        border: none;
        border-radius: 5px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .table .btn-warning {
        background-color: #f39c12;
        color: white;
    }

        .table .btn-warning:hover {
            background-color: #d68910;
        }

    .table .btn-danger {
        background-color: #e74c3c;
        color: white;
    }

        .table .btn-danger:hover {
            background-color: #c0392b;
        }

    /* Estilo de mensaje de carga y vacío */
    p {
        color: #666;
        font-size: 15px;
        margin-top: 15px;
    }

</style>