@page "/home"

@inject HttpClient Http
@{
    var backgroundColor = "#1A2E5A";  // Azul Oscuro Corporativo
    var primaryColor = "#E30613";     // Rojo Energético
    var secondaryColor = "#FFC72C";   // Amarillo Corporativo (accent)
    var textColor = "#FFFFFF";        // Blanco
    var lightText = "rgba(255,255,255,0.8)";
}

<style>
    :root {
        --bg-color: @backgroundColor;
        --primary-color: @primaryColor;
        --secondary-color: @secondaryColor;
        --text-color: @textColor;
        --light-text: @lightText;
        --card-bg: rgba(255, 255, 255, 0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background-color: var(--bg-color);
        font-family: 'Segoe UI', 'Roboto', sans-serif;
        color: var(--text-color);
        line-height: 1.6;
        background-image: radial-gradient(circle at 25% 25%, rgba(255,255,255,0.05) 0%, transparent 50%), linear-gradient(to bottom, var(--bg-color), #0F1F3D);
        min-height: 100vh;
    }

    .dashboard {
        display: grid;
        grid-template-rows: auto 1fr;
        min-height: 100vh;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 0;
        margin-bottom: 30px;
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .logo-container {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .logo {
        height: 50px;
        width: auto;
    }

    .brand-name {
        font-size: 1.8rem;
        font-weight: 700;
        background: linear-gradient(to right, var(--text-color), var(--light-text));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    .brand-tagline {
        font-size: 0.9rem;
        color: var(--light-text);
        margin-top: 5px;
    }

    .user-menu {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .user-greeting {
        text-align: right;
    }

    .welcome-text {
        font-size: 0.9rem;
        color: var(--light-text);
    }

    .username {
        font-weight: 600;
        font-size: 1.1rem;
        margin-top: 3px;
    }

    .user-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background-color: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        cursor: pointer;
        transition: var(--transition);
    }

        .user-avatar:hover {
            transform: scale(1.05);
        }

    .main-content {
        display: grid;
        grid-template-columns: 1fr;
        gap: 30px;
    }

    .content-area {
        display: grid;
        grid-template-rows: auto 1fr;
        gap: 30px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
    }

    .stat-card {
        background: var(--card-bg);
        border-radius: 15px;
        padding: 25px;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
        transition: var(--transition);
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

    .stat-title {
        font-size: 0.9rem;
        color: var(--light-text);
        margin-bottom: 10px;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .stat-change {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.85rem;
    }

    .positive {
        color: #4CAF50;
    }

    .negative {
        color: #F44336;
    }

    .main-card {
        background: var(--card-bg);
        border-radius: 15px;
        padding: 30px;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
        display: grid;
        grid-template-rows: auto 1fr;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
    }

    .card-title {
        font-size: 1.3rem;
        font-weight: 600;
    }

    .card-actions {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        border: none;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: var(--text-color);
    }

        .btn-primary:hover {
            background-color: #C10511;
            transform: translateY(-2px);
        }

    .btn-secondary {
        background-color: rgba(255,255,255,0.1);
        color: var(--text-color);
    }

        .btn-secondary:hover {
            background-color: rgba(255,255,255,0.2);
        }

    .btn svg {
        width: 16px;
        height: 16px;
        fill: currentColor;
    }

    .welcome-banner {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        height: 100%;
    }

    .welcome-title {
        font-size: 2.5rem;
        margin-bottom: 15px;
        background: linear-gradient(to right, var(--text-color), var(--secondary-color));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    .welcome-subtitle {
        font-size: 1.2rem;
        color: var(--light-text);
        margin-bottom: 30px;
        max-width: 600px;
    }

    .dashboard-button {
        padding: 12px 30px;
        font-size: 1.1rem;
        background-color: var(--primary-color);
        color: var(--text-color);
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 10px;
        box-shadow: 0 4px 15px rgba(227, 6, 19, 0.3);
    }

        .dashboard-button:hover {
            background-color: #C10511;
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(227, 6, 19, 0.4);
        }

        .dashboard-button svg {
            width: 20px;
            height: 20px;
            fill: currentColor;
        }

    @@media (max-width: 1200px) {
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
<div class="dashboard">
    <header class="header">
        <div class="logo-container">
            <img src="logo.png" alt="Distribuidora LaCentral" class="logo" />
            <div>
                <div class="brand-name">DISTRIBUIDORA LACENTRAL</div>
                <div class="brand-tagline">Soluciones logísticas de excelencia</div>
            </div>
        </div>

        <div class="user-menu">
            <div class="user-greeting">
                <div class="welcome-text">Bienvenido de vuelta</div>
                <div class="username">@nombreUsuario</div>
            </div>
            <div class="user-avatar" title="Mi perfil">
                @avatarIniciales
            </div>
        </div>
    </header>

    <div class="main-content">
        <div class="content-area">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-title">Inventario</div>
                    @if (inventarioCargando)
                    {
                        <div class="stat-value">Cargando...</div>
                    }
                    else
                    {
                        <div class="stat-value">@totalInventario</div>
                        <div class="stat-change @(cambioInventario >= 0 ? "positive" : "negative")">
                            <svg viewBox="0 0 24 24" width="14" height="14">
                                <path d="@(cambioInventario >= 0 ? "M7,15L12,10L17,15H7Z" : "M7,10L12,15L17,10H7Z")" />
                            </svg>
                            @(cambioInventario >= 0 ? $"+{cambioInventario}%" : $"{cambioInventario}%") en stock
                        </div>
                    }
                </div>
                <div class="stat-card">
                    <div class="stat-title">Clientes Nuevos</div>
                    @if (clientesCargando)
                    {
                        <div class="stat-value">Cargando...</div>
                    }
                    else
                    {
                        <div class="stat-value">@clientesNuevos</div>
                        <div class="stat-change @(cambioClientes >= 0 ? "positive" : "negative")">
                            <svg viewBox="0 0 24 24" width="14" height="14">
                                <path d="@(cambioClientes >= 0 ? "M7,15L12,10L17,15H7Z" : "M7,10L12,15L17,10H7Z")" />
                            </svg>
                            @(cambioClientes >= 0 ? $"+{cambioClientes}%" : $"{cambioClientes}%") este mes
                        </div>
                    }
                </div>
            </div>

            <div class="main-card">
                <div class="card-header">
                    <h2 class="card-title">Resumen Ejecutivo</h2>
                    <div class="card-actions">
                        <button class="btn btn-secondary" @onclick="ActualizarDatos">
                            <svg viewBox="0 0 24 24">
                                <path d="M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z" />
                            </svg>
                            Actualizar
                        </button>
                        <button class="btn btn-primary">
                            <svg viewBox="0 0 24 24">
                                <path d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z" />
                            </svg>
                            Exportar
                        </button>
                    </div>
                </div>

                <div class="welcome-banner">
                    <h1 class="welcome-title">Bienvenido, @nombreUsuario</h1>
                    <p class="welcome-subtitle">
                        Has iniciado sesión correctamente en el sistema de gestión de Distribuidora LaCentral.
                        Desde aquí podrás administrar inventarios, pedidos y clientes de manera eficiente.
                    </p>
                    @if (errorCarga)
                    {
                        <div class="alert alert-danger" role="alert">
                            Error al cargar datos: @mensajeError
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string nombreUsuario = "Administrador";
    private string avatarIniciales = "AD";

    // Variables para el inventario
    private int totalInventario = 0;
    private int cambioInventario = 0;
    private bool inventarioCargando = true;

    // Variables para clientes nuevos
    private int clientesNuevos = 0;
    private int cambioClientes = 0;
    private bool clientesCargando = true;

    // Manejo de errores
    private bool errorCarga = false;
    private string mensajeError = string.Empty;

    // Fechas para comparación
    private DateTime fechaActual = DateTime.Now;
    private DateTime fechaMesPasado = DateTime.Now.AddMonths(-1);

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        try
        {
            inventarioCargando = true;
            clientesCargando = true;
            errorCarga = false;

            await Task.WhenAll(
                ObtenerDatosInventario(),
                ObtenerClientesNuevos()
            );
        }
        catch (Exception ex)
        {
            errorCarga = true;
            mensajeError = ex.Message;
        }
        finally
        {
            inventarioCargando = false;
            clientesCargando = false;
            StateHasChanged();
        }
    }

    private async Task ObtenerDatosInventario()
    {
        try
        {
            // Obtener productos actuales
            var productos = await Http.GetFromJsonAsync<List<Producto>>("api/Producto/GetAllProductos");
            totalInventario = productos?.Sum(p => p.cantidad) ?? 0;

            // En una aplicación real, aquí obtendrías los datos históricos para calcular el cambio
            // Para este ejemplo, simularemos un cambio aleatorio
            cambioInventario = new Random().Next(-10, 10);
        }
        catch
        {
            throw new Exception("Error al cargar datos de inventario");
        }
    }

    private async Task ObtenerClientesNuevos()
    {
        try
        {
            // Obtener todos los clientes
            var clientes = await Http.GetFromJsonAsync<List<Cliente>>("api/Cliente/GetAllClientes");

            // Filtrar clientes nuevos este mes (simulación)
            clientesNuevos = new Random().Next(5, 15);

            // Calcular cambio porcentual (simulación)
            cambioClientes = new Random().Next(10, 40);
        }
        catch
        {
            throw new Exception("Error al cargar datos de clientes");
        }
    }

    private async Task ActualizarDatos()
    {
        await CargarDatos();
    }


    // Clases para deserialización
    public class Producto
    {
        public int codigoProducto { get; set; }
        public string descripcion { get; set; }
        public int cantidad { get; set; }
        public decimal costo { get; set; }
        public int items { get; set; }
        public int idProveedor { get; set; }
        public int idCategoria { get; set; }
        public decimal descuento { get; set; }
        public int idBodega { get; set; }
        public string unidadMedida { get; set; }
        public decimal margenGanancia { get; set; }
    }

    public class Cliente
    {
        public int codigoCliente { get; set; }
        public string cedula { get; set; }
        public string nombre { get; set; }
        public string apellido { get; set; }
        public string tipoCliente { get; set; }
        public string telefono { get; set; }
        public string direccion { get; set; }
        public int creado_por { get; set; }
    }
}