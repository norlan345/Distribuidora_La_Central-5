@page "/gestioninventario"
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Linq
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="inventario-container">
    <!-- Encabezado principal -->
    <header class="app-header">
        <div class="header-title">
            <h1>LECTORALES</h1>
            <h2>PRODUCCIÓN - INVENTARIO</h2>
        </div>
        <div class="header-admin">
            <h3>Administrador</h3>
        </div>
    </header>

    <!-- Sección de productos -->
    <section class="products-section">
        <div class="products-header">
            <h3>Lista de Productos</h3>
            <div class="products-controls">
                <div class="search-box">
                    <input type="text" placeholder="Buscar producto..." @bind="busqueda" />
                    <button class="search-button" @onclick="BuscarProductos">🔍</button>
                </div>
                <button class="add-button" @onclick="ShowAddForm">+ Agregar Producto</button>
               
            </div>
        </div>

        <!-- Tabla de productos -->
        <div class="products-table">
            <table>
                <thead>
                    <tr>
                     
                        <th>Descripción</th>
                        <th>Cantidad</th>
                        <th>Unidad</th>
                        <th>Categoría</th>
                        <th>Descuento</th>
                        <th>Costo</th>
                       
                        <th>Items</th>
                        <th>Bodega</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (productosFiltrados != null && productosFiltrados.Any())
                    {
                        @foreach (var p in productosFiltrados)
                        {
                            <tr>
                            
                                <td>@p.descripcion</td>
                                <td>@p.cantidad</td>
                                <td>@p.unidadMedida</td> <!-- NUEVO -->
                                <td>
                                    @{
                                        var categoria = categoriaProductos.FirstOrDefault(c => c.idCategoria == p.idCategoria);
                                        @(categoria?.nombre ?? "N/A")
                                    }
                                </td>
                                
                                <td>@p.descuento.ToString("P1")</td>
                                <td>C$@p.costo.ToString("N2")</td>
                               
                                <td>@p.items</td>
                                <td>
                                    @{
                                        var bodega = bodegas.FirstOrDefault(b => b.idBodega == p.idBodega);
                                        @(bodega?.nombre ?? "N/A")
                                    }
                                </td>
                                <td>
                                    <button class="action-btn edit-btn" @onclick="() => EditarProducto(p)">✏️</button>
                                    <button class="action-btn delete-btn" @onclick="() => EliminarProducto(p.codigoProducto)">🗑️</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9">@(productos == null ? "Cargando productos..." : "No se encontraron productos")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>

    @if (showForm)
    {
        <div class="modal-backdrop" @onclick="HideForm"></div>
        <div class="product-form-container">
            <div class="form-header">
                <h3>
                    <i class="fas @(productoActual.codigoProducto == 0 ? "fa-plus-circle" : "fa-edit")"></i>
                    @(productoActual.codigoProducto == 0 ? "AGREGAR PRODUCTO" : "EDITAR PRODUCTO")
                </h3>
                <button class="close-btn" @onclick="HideForm">
                    <i class="fas fa-times"></i>×
                </button>
            </div>

            <div class="form-body">
                <div class="form-grid">
                    <!-- Fila 1 -->
                    <div class="form-group">
                        <label><i class="fas fa-align-left"></i> Descripción</label>
                        <input type="text" @bind="productoActual.descripcion" class="form-input" />
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-hashtag"></i> Cantidad</label>
                        <input type="number" @bind="productoActual.cantidad" class="form-input" />
                    </div>

                    <!-- Fila 2 -->
                    <div class="form-group">
                        <label><i class="fas fa-ruler"></i> Unidad de Medida</label>
                        <input type="text" @bind="productoActual.unidadMedida" class="form-input" />
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-percentage"></i> Margen de Ganancia (%)</label>
                        <input type="number" step="0.01" @bind="productoActual.margenGanancia" class="form-input" />
                    </div>

                    <!-- Fila 3 -->
                    <div class="form-group">
                        <label><i class="fas fa-tag"></i> Categoría</label>
                        <div class="select-with-button">
                            <select @bind="productoActual.idCategoria" class="form-select">
                                <option value="0">Seleccione una categoría</option>
                                @foreach (var categoria in categoriaProductos.OrderBy(c => c.nombre))
                                {
                                    <option value="@categoria.idCategoria">@categoria.nombre</option>
                                }
                            </select>
                            <button class="add-category-btn" @onclick="ShowAddCategoriaForm" title="Agregar categoría">
                                <i class="fas fa-plus"></i><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#007bff" viewBox="0 0 24 24">
                                    <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                                </svg>

                            </button>
                        </div>
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-percent"></i> Descuento (%)</label>
                        <input type="number" step="0.1" @bind="productoActual.descuento" class="form-input" />
                    </div>

                    <!-- Fila 4 -->
                    <div class="form-group">
                        <label><i class="fas fa-dollar-sign"></i> Costo</label>
                        <input type="number" step="0.01" @bind="productoActual.costo" class="form-input" />
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-cubes"></i> Items</label>
                        <input type="number" @bind="productoActual.items" class="form-input" />
                    </div>

                    <!-- Fila 5 -->
                    <div class="form-group">
                        <label><i class="fas fa-warehouse"></i> Bodega</label>
                        <select @bind="productoActual.idBodega" class="form-select">
                            <option value="0">Seleccione una bodega</option>
                            @foreach (var bodega in bodegas.OrderBy(b => b.nombre))
                            {
                                <option value="@bodega.idBodega">@bodega.nombre</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-truck"></i> Proveedor</label>
                        <select @bind="productoActual.idProveedor" class="form-select">
                            <option value="0">Seleccione un proveedor</option>
                            @foreach (var prov in proveedores.OrderBy(p => p.nombre))
                            {
                                <option value="@prov.idProveedor">@prov.nombre</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-actions">
                    <button class="cancel-btn" @onclick="HideForm">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button class="save-btn" @onclick="GuardarProducto">
                        <i class="fas fa-save"></i> @(productoActual.codigoProducto == 0 ? "AGREGAR" : "GUARDAR CAMBIOS")
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Formulario para agregar categoría -->
    @if (showCategoriaForm)
    {
        <div class="modal-backdrop" @onclick="HideCategoriaForm"></div>
        <div class="add-product-form">
            <div class="form-header">
                <h3>Agregar Nueva Categoría</h3>
                <button class="close-btn" @onclick="HideCategoriaForm">×</button>
            </div>
            <div class="form-body">
                <div class="form-row">
                    <div class="form-group">
                        <label>Nombre:</label>
                        <input type="text" @bind="nuevaCategoria.nombre" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Descripción:</label>
                        <input type="text" @bind="nuevaCategoria.descripcion" />
                    </div>
                </div>
                <div class="form-actions">
                    <button class="save-btn" @onclick="GuardarCategoria">Guardar</button>
                    <button class="cancel-btn" @onclick="HideCategoriaForm">Cancelar</button>
                </div>
            </div>
        </div>
    }

    <!-- Mensajes de estado -->
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="status-message @(mensaje.Contains("✅") ? "success" : "error")">
            @mensaje
        </div>
    }
</div>

@code {
    public class Bodega
    {
        public int idBodega { get; set; }
        public string nombre { get; set; }
        public string ubicacion { get; set; }
    }

    public class Producto
    {
        public int codigoProducto { get; set; }
        public string descripcion { get; set; }
        public int cantidad { get; set; }
        public int idCategoria { get; set; }
        public decimal descuento { get; set; }
        public decimal costo { get; set; }
        public int items { get; set; }
        public int idBodega { get; set; }
        public int idProveedor { get; set; }

        // Nuevas propiedades
        public string unidadMedida { get; set; }    // NUEVO
        public decimal margenGanancia { get; set; }  // NUEVO

    }

    public class CategoriaProducto
    {
        public int idCategoria { get; set; }
        public string nombre { get; set; }
        public string descripcion { get; set; }
    }

    public class Proveedor
    {
        public int idProveedor { get; set; }
        public string nombre { get; set; }
        public string razonSocial { get; set; }
        public string contacto { get; set; }
        public string telefono { get; set; }
        public DateTime diaIngreso { get; set; }
    }

    private List<Bodega> bodegas = new();
    private List<Producto> productos = new();
    private List<Producto> productosFiltrados = new();
    private List<Proveedor> proveedores = new();
    private List<CategoriaProducto> categoriaProductos = new();
    private Producto productoActual = new();
    private CategoriaProducto nuevaCategoria = new();
    private string mensaje = string.Empty;
    private string busqueda = string.Empty;
    private bool showForm = false;
    private bool showCategoriaForm = false;
    private bool modoEditar = false;
    private int categoriaFiltro = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        await CargarCategorias();
        proveedores = await Http.GetFromJsonAsync<List<Proveedor>>("api/Proveedor/obtener-todos") ?? new();
        await CargarBodegas();
    }

    private async Task CargarProductos()
    {
        try
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("api/Producto/GetAllProductos") ?? new();
            productosFiltrados = productos;
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error al cargar productos: {ex.Message}";
        }
    }

    private async Task CargarBodegas()
    {
        try
        {
            bodegas = await Http.GetFromJsonAsync<List<Bodega>>("api/Bodega/obtener-todos") ?? new();
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error al cargar bodegas: {ex.Message}";
        }
    }

    private async Task CargarCategorias()
    {
        try
        {
            categoriaProductos = await Http.GetFromJsonAsync<List<CategoriaProducto>>("api/CategoriaProducto/obtener-todas-categorias") ?? new();
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error al cargar categorías: {ex.Message}";
        }
    }

    private void BuscarProductos()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
        {
            productosFiltrados = productos;
            return;
        }

        var termino = busqueda.ToLower();
        productosFiltrados = productos.Where(p =>
            p.descripcion.ToLower().Contains(termino) ||
            p.codigoProducto.ToString().Contains(termino))
            .ToList();
    }

    private void ShowAddForm()
    {
        productoActual = new Producto();
        showForm = true;
        modoEditar = false;
    }

    private void ShowAddCategoriaForm()
    {
        nuevaCategoria = new CategoriaProducto();
        showCategoriaForm = true;
    }

    private void HideForm()
    {
        showForm = false;
        productoActual = new Producto();
        modoEditar = false;
    }

    private void HideCategoriaForm()
    {
        showCategoriaForm = false;
        nuevaCategoria = new CategoriaProducto();
    }

    private void EditarProducto(Producto producto)
    {
        productoActual = new Producto
            {
                codigoProducto = producto.codigoProducto,
                descripcion = producto.descripcion,
                cantidad = producto.cantidad,
                idCategoria = producto.idCategoria,
                descuento = producto.descuento,
                costo = producto.costo,
                items = producto.items,
                idBodega = producto.idBodega,
                idProveedor = producto.idProveedor
            };
        showForm = true;
        modoEditar = true;
    }

    private async Task GuardarProducto()
    {
        try
        {
            if (modoEditar)
            {
                var response = await Http.PutAsJsonAsync($"api/Producto/ActualizarProducto/{productoActual.codigoProducto}", productoActual);
                if (response.IsSuccessStatusCode)
                {
                    mensaje = "✅ Producto actualizado con éxito";
                    await CargarProductos();
                    HideForm();
                }
                else
                {
                    mensaje = "❌ Error al actualizar el producto";
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("api/Producto/RegistrarProducto", productoActual);
                if (response.IsSuccessStatusCode)
                {
                    mensaje = "✅ Producto agregado con éxito";
                    await CargarProductos();
                    HideForm();
                }
                else
                {
                    mensaje = "❌ Error al agregar el producto";
                }
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error: {ex.Message}";
        }
    }

    private async Task GuardarCategoria()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(nuevaCategoria.nombre))
            {
                mensaje = "❌ El nombre de la categoría es requerido";
                return;
            }

            var response = await Http.PostAsJsonAsync("api/CategoriaProducto/registrar-categoria", nuevaCategoria);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Categoría agregada con éxito";
                await CargarCategorias();
                HideCategoriaForm();
            }
            else
            {
                mensaje = $"❌ Error al agregar categoría: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error: {ex.Message}";
        }
    }

    private async Task EliminarProducto(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Producto/{id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Producto eliminado con éxito";
                await CargarProductos();
            }
            else
            {
                mensaje = $"❌ Error al eliminar: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error: {ex.Message}";
        }
    }
}
<style>
    /* Variables de color */
    :root {
        --primary-color: #D32F2F; /* Rojo principal */
        --secondary-color: #1976D2; /* Azul */
        --dark-color: #333333;
        --light-color: #FFFFFF;
        --gray-light: #F5F5F5;
        --gray-medium: #E0E0E0;
        --gray-dark: #757575;
        --success-color: #4CAF50;
        --error-color: #F44336;
        --warning-color: #FFC107;
    }

    /* Estilos generales */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
        background-color: #FAFAFA;
        color: var(--dark-color);
    }

    .inventario-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Encabezado */
    .app-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid var(--gray-medium);
    }

    .header-title h1 {
        color: var(--primary-color);
        font-size: 28px;
        font-weight: bold;
    }

    .header-title h2 {
        color: var(--dark-color);
        font-size: 18px;
        font-weight: normal;
    }

    .header-admin h3 {
        color: var(--secondary-color);
        font-size: 20px;
        font-weight: bold;
    }

    /* Sección de productos */
    .products-section {
        background-color: var(--light-color);
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background-color: var(--secondary-color);
        color: var(--light-color);
    }

        .products-header h3 {
            font-size: 18px;
            font-weight: 500;
        }

    .products-controls {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .search-box {
        display: flex;
        align-items: center;
        background-color: var(--light-color);
        border-radius: 4px;
        overflow: hidden;
    }

        .search-box input {
            padding: 8px 15px;
            border: none;
            width: 250px;
            outline: none;
        }

    .search-button {
        padding: 8px 15px;
        background-color: var(--primary-color);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .add-button {
        padding: 8px 15px;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.2s ease;
    }

        .add-button:hover {
            background-color: #B71C1C;
        }

    /* Tabla de productos */
    .products-table {
        padding: 20px;
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        min-width: 800px;
    }

    th, td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid var(--gray-medium);
    }

    th {
        background-color: var(--gray-light);
        font-weight: bold;
        color: var(--dark-color);
        position: sticky;
        top: 0;
    }

    tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .action-btn {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        margin: 0 5px;
        padding: 5px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .edit-btn {
        color: var(--success-color);
    }

        .edit-btn:hover {
            background-color: rgba(76, 175, 80, 0.1);
        }

    .delete-btn {
        color: var(--error-color);
    }

        .delete-btn:hover {
            background-color: rgba(244, 67, 54, 0.1);
        }

    /* Formularios modales */
    .add-product-form {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--light-color);
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        width: 600px;
        max-width: 95%;
        max-height: 90vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background-color: var(--secondary-color);
        color: var(--light-color);
        border-radius: 8px 8px 0 0;
        position: sticky;
        top: 0;
    }

        .form-header h3 {
            font-size: 18px;
        }

    .close-btn {
        background: none;
        border: none;
        color: var(--light-color);
        font-size: 24px;
        cursor: pointer;
        line-height: 1;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .form-body {
        padding: 20px;
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 0;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: var(--dark-color);
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--gray-medium);
            border-radius: 4px;
            font-size: 14px;
        }

            .form-group input:focus,
            .form-group select:focus {
                outline: none;
                border-color: var(--secondary-color);
                box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
            }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid var(--gray-medium);
    }

    .save-btn {
        padding: 8px 20px;
        background-color: var(--success-color);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .save-btn:hover {
            background-color: #388E3C;
        }

    .cancel-btn {
        padding: 8px 20px;
        background-color: var(--gray-medium);
        color: var(--dark-color);
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .cancel-btn:hover {
            background-color: #BDBDBD;
        }

    /* Mensajes de estado */
    .status-message {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 4px;
        color: white;
        font-weight: bold;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
        max-width: 400px;
    }

    .success {
        background-color: var(--success-color);
    }

    .error {
        background-color: var(--error-color);
    }

    /* Fondo semitransparente cuando el formulario está abierto */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    /* Animaciones */
    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .app-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .products-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .products-controls {
            width: 100%;
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            width: 100%;
        }

            .search-box input {
                width: 100%;
            }

        .add-button {
            width: 100%;
        }

        .form-row {
            flex-direction: column;
            gap: 15px;
        }

        .add-product-form {
            width: 95%;
        }
    }


    /* Estilos para el formulario de producto */
    .product-form-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 700px;
        max-width: 95%;
        max-height: 90vh;
        background: white;
        border-radius: 10px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        overflow-y: auto;
    }

    .form-header {
        padding: 1.2rem 1.5rem;
        background: linear-gradient(135deg, #D32F2F 0%, #B71C1C 100%);
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

        .form-header h3 {
            margin: 0;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.3rem;
        cursor: pointer;
        padding: 0.3rem;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .close-btn:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

    .form-body {
        padding: 1.5rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.2rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 0;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .form-input, .form-select {
        width: 100%;
        padding: 0.6rem 0.8rem;
        border: 1px solid #ced4da;
        border-radius: 5px;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

        .form-input:focus, .form-select:focus {
            border-color: #D32F2F;
            box-shadow: 0 0 0 0.2rem rgba(211, 47, 47, 0.2);
            outline: none;
        }

    .select-with-button {
        display: flex;
        gap: 0.5rem;
    }

    .form-select {
        flex: 1;
    }

    .add-category-btn {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        border-radius: 5px;
        padding: 0 0.8rem;
        cursor: pointer;
        color: #495057;
        transition: all 0.2s;
        display: flex;
        align-items: center;
    }

        .add-category-btn:hover {
            background-color: #e9ecef;
            color: #D32F2F;
        }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
        margin-top: 1rem;
    }

    .save-btn, .cancel-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 5px;
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s;
    }

    .save-btn {
        background-color: #28a745;
        color: white;
        border: none;
    }

        .save-btn:hover {
            background-color: #218838;
            transform: translateY(-2px);
        }

    .cancel-btn {
        background-color: white;
        color: #495057;
        border: 1px solid #ced4da;
    }

        .cancel-btn:hover {
            background-color: #f8f9fa;
            transform: translateY(-2px);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .form-grid

    {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .form-actions {
        flex-direction: column-reverse;
    }

    .save-btn, .cancel-btn {
        width: 100%;
        justify-content: center;
    }

    }
</style>
